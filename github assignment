QUESTIONS




1.	What are the advantages of using Git?
= The advantages of using git are:
a)	 Git has strong performance than other version control tool. New code change can be easily committed, version branches can be easily merged, it creates the real source code file trees helps in understanding how files are modified from beginning.
b)	 An algorithm in Git named SHA1 helps to protect code and change history from accidental damage
c)	 It support non linear development workflow that means we can create branch for the operation and work with master branch parallely and merged them later
d)	It is a open source project with the access code we can work from any computer and anywhere.
e)	It is a distributed vcs enables the user to have local repository and don’t require internet to commit and access history of commit and previous file version.

2.	What language is used in Git?
3.	= Git source code is written in C while other language like Shell, Perl, Tcl, python, C++ can be used in that repository.

4.	What is the meaning of “Index” or “Staging Area” in Git?
=Index or staging area is simply a file in git directory where the modified file from the working directory are staged to commit. The file in the staging area are next commit.
5.	

6.	What is the process for creating a repository in Git?

a)	the upper-right corner of any page use the drop-down menu, and select New repository.
b)	Type a short, memorable name for your repository. ... 
c)	Optionally, add a description of your repository. ... 
d)	Choose to make the repository either public or private. ... 
e)	Select Initialize this repository with a README.
f)	Click Create repository.


7)	What is ‘head’ in Git and how many heads can be created in a repository?
= head is the reference of last commit in currently check out branch. There can be any number of head.

8)	Why do we need branching in Git?
The purpose of branching would be:
Active development streams: an persistent codeline when sequential various developments take place
tasks branches: short-lived branches for more specific task (bug-fix is a classic one, but you can also define a branch for a merge effort you know to be complex to complete: you can merge, commit and test in that task branch without introducing problem for the main current development branch)
staging branch: for preparing a release, with some pre-production specific data or config files.
Private branches, ad hoc branches, and sparse branches: for very small tasks, just to be able to commit some work in progress without waiting for formal completion or test review.
That allows to "commit early, commit often".

9)	Write a way to create a new branch in Git?
$ git checkout -b <branch-name>

10)	How do you define a ‘conflict’ in Git?
= A merge conflict is an event that occurs when Git is unable to automatically resolve differences in code between two commits. When all the changes in the code occur on different lines or in different files, Git will successfully merge commits without your help.

11)	How to resolve a conflict in Git?
a)	Open the terminal.
b)	Navigate into the local Git repository that has the merge conflict. ... 
c)	Generate a list of the files affected by the merge conflict. ... 
d)	Open your favorite text editor, such as Atom, and navigate to the file that has merge conflicts.
e)	Decide if you want keep the removed file.
f)	 Add or stage the changes
g)	 Commit your changes with commit


12)	What is the function of ‘git config’?
The git config command is a convenience function that is used to set Git configuration values on a global or local project level. These configuration levels correspond to .gitconfig text files. Executing git config will modify a configuration text file

13)	What is Git fork?
A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project. Mac Windows Linux All. Most commonly, forks are used to either propose changes to someone else's project or to use someone else's project as a starting point for your own idea.

14)	Difference between fork, branch and clone?
Each fork of the main repo corresponds to a contributor's work. A fork is really a Github (not Git) construct to store a clone of the repo in your user account. As a clone, it will contain all the branches in the main repo at the time you made the fork.
Each branch within the fork and/or in the main repo can correspond to several kinds of things, depending on how you want to work. Each branch could refer to a version of the project but can also correspond to different channels of development, like hotfixes or experimental work.
During git clone you actually copy the original repo. While a fork is just a request to clone the project and reguster under your username. Github also keeps track of relationship between the two repos. If you fork a repo you can push changes to repo without requiring access be granted from source.

15)	What's the difference between a "pull request" and a "branch"?
Pull requests let you tell others about changes you've pushed to a GitHub repository. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
A separate version of the code is BRANCH

16)	What is the difference between "git pull" and "git fetch"?
git fetch just "downloads" the changes from the remote to your local repository. git pull downloads the changes and merges them into your current branch

17)	How to revert previous commit in Git?
If you want to revert the last commit just do git revert <unwanted commit hash> ; then you can push this new commit, which undid your previous commit. To fix the detached head do git checkout <current branch

18)	Explain the advantages of Forking Workflow
The main advantage of the Forking Workflow is that contributions can be integrated without the need for everybody to push to a single central repository. Developers push to their own server-side repositories, and only the project maintainer can push to the official repository. This allows the maintainer to accept commits from any developer without giving them write access to the official codebase.

19)	Difference between HEAD, working tree and index, in Git?
HEAD is a pointer to the branch or commit that you last checked out, and which will be the parent of a new commit if you make it. For instance, if you're on the master branch, then HEAD will point to master, and when you commit, that new commit will be a descendent of the revision that master pointed to, and master will be updated to point to the new commit.
The index is a staging area where the new commit is prepared. Essentially, the contents of the index are what will go into the new commit (though if you do git commit -a, this will automatically add all changes to files that Git knows about to the index before committing, so it will commit the current contents of your working tree). git add will add or update files from the working tree into your index.

The working tree, or working directory, consists of files that you are currently working on. You can think of a working tree as a file system where you can view and modify files. The index, or staging area, is where commits are prepared. The index compares the files in the working tree to the files in the repo.

20)	How to identify if a certain branch has been merged into master?
The -a flag will show both local and remote branches, and the -r flag shows only the remote branches. You can use the git merge-base command to find the latest common commit between the two branches. If that commit is the same as your branch head, then the branch has been completely merged

21)	What is the use of a Git clone?
git clone is primarily used to point to an existing repo and make a clone or copy of that repo at in a new directory, at another location. The original repository can be located on the local filesystem or on remote machine accessible supported protocols. The git clone command copies an existing Git repository.

a.	What is Git stash?
The git stash command takes your uncommitted changes (both staged and unstaged), saves them away for later use, and then reverts them from your working copy.
At this point you're free to make changes, create new commits, switch branches, and perform any other Git operations; then come back and re-apply your stash when you're ready.

21.	When should I use "git stash"?
Use git stash when you want to record the current state of the working directory and the index, but want to go back to a clean working directory. The command saves your local modifications away and reverts the working directory to match the HEAD commit.

22. What is Git stash drop?

23. What is Git stash save?
 
QUESTIONS




24.	What README.MD ? What is its purpose? What does MD stands for?
  A README file contains information about other files in a directory or archive of computer software. A form of documentation, it is usually a simple plain text file called READ.ME.   .md is markdown. README.md is used to generate the html summary you see at the bottom of projects.

25.	How to create repository from command prompt?
touch README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin git@github.com:alexpchin/<reponame>.git
git push -u origin master

26.	What is the function of ‘git checkout’ in Git?
The git checkout command lets you navigate between the branches created by git branch . Checking out a branch updates the files in the working directory to match the version stored in that branch, and it tells Git to record all new commits on that branch

27.	How can you bring a new feature in the main branch?

28.	What is the function of ‘git rm’?

The git rm command can be used to remove individual files or a collection of files. The primary function of git rm is to remove tracked files from the Git index. Additionally, git rm can be used to remove files from both the staging index and the working directory

29.	What is the function of ‘git stash apply’?

30.	What is the use of ‘git log’?

he Git Log tool allows you to view information about previous commits that have occurred in a project. The simplest version of the log command shows the commits that lead up to the state of the currently checked out branch. These commits are shown in reverse chronological order (the most recent commits first)

31.	What is ‘git add’ is used for?
When used on its own, git add will promote pending changes from the working directory to the staging area

32.	What is 'git diff' is used for?
Diffing is a function that takes two input data sets and outputs the changes between them. git diff is a multi-use Git command that when executed runs a diff function on Git data sources. These data sources can be commits, branches, files and more.

33.	What is ‘git status’ is used for?
The git status command displays the state of the working directory and the staging area. It lets you see which changes have been staged, which haven't, and which files aren't being tracked by Git. Status output does not show you any information regarding the committed project histor

34.	Can we create multiple branch with one command?

35.	what is the command that is used to delete a branch?

36.	The -d option stands for --delete , which would delete the local branch, only if you have already pushed and merged it with your remote branches. The -D option stands for --delete --force , which deletes the branch regardless of its push and merge status, so be careful using this one

37.	What is another option for merging in git?

38.	In Git, this simplest form of integration is called a "fast-forward" merge. Both branches then share the exact same history. In a lot of cases, however, both branches moved forward individually. To make an integration, Git will have to create a new commit that contains the differences between them - the merge commit.

39.	How to remove a file from git without removing it from your file system?

40.	Use of "git rebase" instead of "git merge"?

41.	What is a repository in Git?

Git repository is just a file location where you are storing all the files related to your project. ... When you git commit your code, a version/snapshot is created in your local repo. Remote repository: A remote repository generally lies somewhere outside your system, on a remote machine

42.	Command used to write a commit message?
Type the subject of your commit on the first line. ... 
Write a detailed description of what happened in the committed change. ... 
Press Esc and then type :wq to save and exit.


43.	What does commit object contain?
A commit object contains the reference to another tree object and some other information(author, committer etc.)

44.	Write one use-case of Github?

45.	Name some alternative of Git?

•	Mercurial SCM. Mercurial is a free, distributed source control management tool. ... 
•	Apache Subversion. Apache SVN is a centralized version control system similar to CVS , but based on the concept of change-sets instead. ... 
•	Trac. ... 
•	Fossil. ... 
•	Bazaar. ... 
•	darcs. ... 
•	GitCenter. ... 
•	CVS (Concurrent Versions System)


46.	What is a gist in Git?
Every gist is a Git repository, which means that it can be forked and cloned. If you are signed in to GitHub when you create a gist, the gist will be associated with your account and you will see it in your list of gists when you navigate to your gist home page. Gists can be public or secret.

47.	What is a gist programming?

48.	Name any two Git repository hosting services which are common?

Gitlab and   bitbucket 
